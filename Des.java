package des;
public class Des {
    public static int [] rand_row(){
        int []x=new int[16];
        x[0]=(int)(Math.random()*16);
        int e,f,i=1;
        while (i<16) {
            f=1;
            e=(int)(Math.random()*16);
            for (int j = 0; j < i; j++) {
                if (e==x[j]) {
                    f=0;
                    break;
                }
            }
            if (f==1){
                x[i++]=e;
                
            }
        }
        
    return x;
    }
    public static String [][][] rand_sbox(){
        String [][][] sb=new String[8][4][16];
        int []xx=new int[16];
        String y, z = "0000";
        for (int k = 0; k < 8; k++) {
            for (int i = 0; i < 4; i++) {
                xx=rand_row();
                for (int j = 0; j < 16; j++) {
                    y = Integer.toBinaryString(xx[j]);
                    sb[k][i][j]=z.substring(0, 4 - y.length()) + y;
                }
            }
        }
    
    
    return sb;}

    public static final int pc_1[] = {57, 49, 41, 33, 25, 17, 9,
        1, 58, 50, 42, 34, 26, 18, 10, 2,
        59, 51, 43, 35, 27, 19, 11,
        3, 60, 52, 44, 36, 63, 55, 47,
        39, 31, 23, 15, 7, 62, 54, 46, 38,
        30, 22, 14, 6, 61, 53, 45,
        37, 29, 21, 13, 5, 28, 20, 12, 4};

    public static final int pc_2[] = {14, 17, 11, 24, 1, 5, 3, 28,
        15, 6, 21, 10, 23,
        19, 12, 4, 26, 8,
        16, 7, 27, 20, 13, 2,41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44,
        49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32};

////////////////////////////////////////////////////////////////////////////////
    public static final int pc_2_right[] = {41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44,
        49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32};
////////////////////////////////////////////////////////////////////////////////
    public static final int ip[] = {58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6,
         64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3,
        61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7
    };
////////////////////////////////////////////////////////////////////////////////
//E-Bit Selection Table	
    public static final int[] E = {
        32, 1,   2,  3,  4,  5,
        4,  5,   6,  7,  8,  9,
        8,  9,  10, 11, 12, 13,
        12, 13, 14, 15, 16, 17,
        16, 17, 18, 19, 20, 21,
        20, 21, 22, 23, 24, 25,
        24, 25, 26, 27, 28, 29,
        28, 29, 30, 31, 32, 1
    };
//////////////////////////////////////////////////////////////////////////////// 
/* Inverse Initial Permutation */
    public static final int[] IIP = {
        40, 8, 48, 16, 56, 24, 64, 32,
        39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30,
        37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28,
        35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26,
        33, 1, 41,  9, 49, 17, 57, 25
    };
////////////////////////////////////////////////////////////////////////////////

    /* Permutation For output of S_box */
    public static final int[] P = {
        16,  7, 20, 21,
        29, 12, 28, 17,
         1, 15, 23, 26, 
         5, 18, 31, 10,
         2,  8, 24, 14,
        32, 27,  3,  9,
        19, 13, 30,  6,
        22, 11,  4, 25
    };

//////////////////////////////////////////////////////////////////////////////// 
/* S-Boxes*/
// public static int[] S1 = {
//	14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
//	0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
//	4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
//	15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13
//	};
// public static final int[] S2 = {
//	15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
//	3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
//	0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
//	13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9
//	};
// public static final int[] S3 = {
//	10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
//	13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
//	13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
//	1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12
//	};
// public static final int[] S4 = {
//	7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
//	13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
//	10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
//	3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14
//	};
// public static final int[] S5 = {
//	2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
//	14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
//	4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
//	11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3
//	};
// public static final int[] S6 = {
//	12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
//	10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
//	9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
//	4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13
//	};
// public static final int[] S7 = {
//	4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
//	13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
//	1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
//	6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12
//	};
// public static final int[] S8 = {
//	13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
// 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
//	7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
//	2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11
//	};
    public static String[][][] s_box
            = {
                {{"0100", "1011", "0110", "1000", "0001", "0101", "1111", "1100", "0011", "0000", "1110", "0111", "1101", "1010", "1001", "0010"}, 
                {"0000", "1000", "1110", "0010", "1001", "0110", "0101", "1100", "1010", "0011", "0100", "0111", "1111", "1011", "0001", "1101"},
                {"0110", "1101", "1010", "1000", "1110", "0010", "0111", "0100", "0000", "0101", "0001", "0011", "1100", "1001", "1011", "1111"}, 
                {"1001", "0111", "1000", "0001", "0011", "0110", "0000", "0100", "1010", "1101", "1011", "0010", "0101", "1110", "1100", "1111"}},
                
                {{"0001", "1100", "0011", "1101", "1011", "1110", "0110", "0000", "1111", "1000", "0100", "1010", "0101", "1001", "0111", "0010"},
                {"0111", "1110", "0100", "1101", "0011", "0000", "1001", "0110", "1010", "1011", "1100", "0010", "0101", "1000", "0001", "1111"}, 
                {"1110", "1101", "1011", "0111", "0001", "1000", "1111", "0011", "0010", "0101", "1001", "1100", "0110", "0000", "0100", "1010"}, 
                {"1011", "1000", "0010", "1101", "0000", "1010", "0001", "1111", "0100", "0011", "1110", "1001", "1100","0110","0111", "0101"}},
                
                {{"0111", "1110", "0000", "1001", "0010", "1101", "1000", "1111", "0100", "1010", "1100", "0101", "0110", "0001","1011", "0011"},
                {"0001", "1011", "0110", "1010", "1110", "0100", "1000", "1100", "1111", "0111", "0101", "0010", "0000", "1101","0011", "1001"},
                {"1100", "0011", "1001", "0111", "1011", "1000", "1101", "0000", "1010", "1110", "1111", "0010", "0110", "0101","0001", "0100"},
                {"0101", "1001", "1000", "1110", "0110", "1100", "0001", "0111", "0100", "0000", "1101", "1010", "1111", "1011","0011", "0010"}},
                
                {{"1010", "0100", "0101", "1011", "1100", "0001", "1101", "0111", "0010", "1110", "1001", "1111", "1000", "0110", "0000", "0011"},
                {"1101", "0011", "1000", "1100", "0100", "0110", "1001", "1010", "0111", "0010", "1111", "0000", "1011", "1110", "0001", "0101"},
                {"1001", "1111", "0110", "0101", "0011", "0111", "0100", "1000", "1101", "1100", "1010", "0001", "0010", "1011", "1110", "0000"},
                {"0000", "0001", "1001", "1110", "0101", "0011", "0111", "0110", "1010", "1011", "1101", "0010", "0100", "1100", "1111", "1000"}},
                
                {{"0100", "1110", "1111", "0101", "0010", "1100", "1101", "1011", "0110", "0111", "0000", "1001", "0011", "1010", "0001", "1000"},
                {"1011", "1111", "1001", "0000", "0110", "1110", "1101", "0111", "0011", "0101", "0010", "1000", "1100", "0100", "1010", "0001"},
                {"0110", "1100", "0011", "1110", "0010", "0100", "0001", "0000", "1000", "1010", "1011", "0101", "1101", "1001", "0111", "1111"},
                {"0001", "0111", "0011", "0100", "1000", "1010", "1100", "0000", "1101", "1110", "0101", "0110", "0010", "1011", "1001", "1111"}},

                {{"0101", "1001", "1101", "0000", "0001", "0100", "0011", "1110", "0010", "1111", "0111", "1000", "0110", "1011", "1100", "1010"},
                {"0101", "0001", "0100", "1100", "0110", "0000", "0010", "0011", "1110", "1010", "0111", "1011", "1101", "1000", "1001", "1111"},
                {"0011", "1101", "0101", "0100", "1111", "0110", "0001", "0111", "1010", "0010", "1001", "0000", "1100", "1110", "1011", "1000"},
                {"0011", "0110", "0101", "1111", "1100", "0010", "1110", "0100", "0000", "0001", "1101", "1010", "1001", "1000", "1011", "0111"}},

                {{"0110", "0011", "1001", "1111", "1010", "1110", "0111", "0010", "0000", "0100", "1100", "1011", "1101", "0101", "0001", "1000"},
                {"1010", "1111", "1000", "1011", "1101", "0111", "0100", "0110", "0011", "0001", "0101", "0000", "1001", "1100", "0010", "1110"},
                {"0100", "1111", "1001", "0001", "0010", "1100", "0000", "0111", "0101", "1011", "0011", "1010", "1110", "1000", "1101", "0110"},
                {"0001", "1001", "0110", "1100", "0000", "1000", "0011", "0100", "0010", "1110", "1011", "1101", "0101", "1010", "1111", "0111"}},

                {{"1111", "0001", "1011", "0111", "0100", "1000", "1010", "0011", "1001", "0110", "0101", "0010", "0000", "1110", "1101", "1100"},
                {"0000", "0001", "0101", "1101", "1011", "0110", "0100", "0011", "0111", "1111", "1100", "1000", "0010", "1110", "1001", "1010"},
                {"1011", "0110", "0111", "0101", "0011", "1110", "0010", "1111", "1001", "0000", "1000", "0100", "1010", "0001", "1101", "1100"},
                {"0010", "0000", "1010", "0001", "0011", "1100", "1000", "0101", "1011", "1111", "1110", "1001", "1101", "0110", "0111", "0100"}}
            };
//    public static String[][][] s_box;

//////////////////////////////////////////////////////////////////////////////// 
/////////////////////////////////////////////////////////////////////////////// 
    public static String[][][] sbox() {
        /* S-Boxes*/

        int[] S1 = {
            14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
            0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
            4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
            15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13
        };
        int[] S2 = {
            15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
            3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
            0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
            13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9
        };
        int[] S3 = {
            10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
            13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
            13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
            1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12
        };
        int[] S4 = {
            7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
            13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
            10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
            3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14
        };
        int[] S5 = {
            2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
            14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
            4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
            11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3
        };
        int[] S6 = {
            12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
            10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
            9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
            4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13
        };
        int[] S7 = {
            4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
            13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
            1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
            6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12
        };
        int[] S8 = {
            13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
            1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
            7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
            2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11
        };

        String S[][][] = new String[8][4][16];
        String y, z = "0000";

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 16; j++) {
                y = Integer.toBinaryString(S1[i * 16 + j]);
                S[0][i][j] = z.substring(0, 4 - y.length()) + y;
                y = Integer.toBinaryString(S2[i * 16 + j]);
                S[1][i][j] = z.substring(0, 4 - y.length()) + y;
                y = Integer.toBinaryString(S3[i * 16 + j]);
                S[2][i][j] = z.substring(0, 4 - y.length()) + y;
                y = Integer.toBinaryString(S4[i * 16 + j]);
                S[3][i][j] = z.substring(0, 4 - y.length()) + y;
                y = Integer.toBinaryString(S5[i * 16 + j]);
                S[4][i][j] = z.substring(0, 4 - y.length()) + y;
                y = Integer.toBinaryString(S6[i * 16 + j]);
                S[5][i][j] = z.substring(0, 4 - y.length()) + y;
                y = Integer.toBinaryString(S7[i * 16 + j]);
                S[6][i][j] = z.substring(0, 4 - y.length()) + y;
                y = Integer.toBinaryString(S8[i * 16 + j]);
                S[7][i][j] = z.substring(0, 4 - y.length()) + y;
            }
        }
        return S;
    }

    public static String Permutation(String bits, int[] table) {
//        System.out.println(bits.length());
        String output = "";
        for (int i = 0; i < table.length; i++) {
            output += bits.charAt(table[i] - 1);
        }
        return output;
    }

//Take 32 bit expand to 48 bit 
    public static String E_bit_selection_table(String data) {
        data = Permutation(data, E);
        return data;
    }

    public static String[] keyGeneration(String key) {

        key = Permutation(key, pc_1);
        String key_L = key.substring(0, 28);
        String key_R = key.substring(28, 56);
//16 round with 16 subkey 
        String subkey[] = new String[16];
//Key Generation for 16 keys 
        for (int i = 0; i < 16; i++) {
            key_L = shift(key_L, i + 1);
            key_R = shift(key_R, i + 1);
            subkey[i]=Permutation(key_L+key_R, pc_2);
            System.out.println("K "+i+"=  "+subkey[i]);
        }
        return subkey;

    }

    public static String Inital_permutaion_data(String data) {
        data = Permutation(data, ip);
        return data;

    }

    public static String swap(String data) {
        return data.substring(32, 64) + data.substring(0, 32);
    }

    public static String inverse_permutation(String data) {
        return Permutation(data, IIP);
    }

    public static String shift(String key, int round) {

        if (round == 1 || round == 2 || round == 9 || round == 16) {
            key = key.substring(1, 28) + key.charAt(0);
        } else {
            key = key.substring(1, 28) + key.charAt(0);
            key = key.substring(1, 28) + key.charAt(0);
        }

        return key;
    }

    public static String srt2bit(String name) {

        String key = "";
        int x;
        String y, z = "00000000";
        for (int i = 0; i < name.length(); i++) {
            x = (int) name.charAt(i);
            y = Integer.toBinaryString(x);
            key += z.substring(0, 8 - y.length()) + y;

        }
        return key;
    }
//permutation output of s box
    public static String permutaion_p(String data) {
        data = Permutation(data, P);
        return data;
    }

    public static String xor(String A, String B) {
        String result = "";
        for (int i = 0; i < A.length(); i++) {
            result += (B.charAt(i)) ^ (A.charAt(i));

        }
        return result;
    }

    public static String MangularFunction(String right_data, String subkey) {

        String r_data = E_bit_selection_table(right_data);
//        s_box = sbox();
        String result = xor(r_data, subkey);
        String temp ;
        String data = "";
        int row, column;
        String r;
        String c;
        for (int i = 0; i < 48; i += 6) {

            temp = result.substring(i, i + 6);
            r = "" + temp.charAt(0)+temp.charAt(5);
            c = temp.substring(1, 5);
            row = Integer.parseInt(r, 2);
            column = Integer.parseInt(c, 2);
            data += s_box[i / 6][row][column];
        }

        return permutaion_p(data);
    }

    public static String round(String data, String subkey) {
        String L = data.substring(32, 64);
        String R = MangularFunction(data.substring(32, 64), subkey);
        R = xor(R,data.substring(0, 32) );
        return L + R;
    }

    public static String Encription(String data, String key) {
//Getting key
        String[] subkey = keyGeneration(key);
//inital permutaion
        data = Inital_permutaion_data(data);
//16 Round
//        System.out.println("Round  0" + "   " + data);
        for (int i = 0; i < 16; i++) {
            data = round(data, subkey[i]);
//            System.out.println("Round  " + (i + 1) + "   " + data);

        }
        data = swap(data);

        data = inverse_permutation(data);
        return data;
    }

    public static String Decription(String data, String key) {
//Getting key
        String[] subkey = keyGeneration(key);

//inital permutaion
data=Inital_permutaion_data(data);
data=swap(data);
//16 Round
//        System.out.println("DEC_Round  16");
//        System.out.println(data);
        for (int i = 15; i >= 0; i--) {
            data = Dec_round(data, subkey[i]);
//            System.out.println("DEC_Round  " + (i ));
//            System.out.println(data);
        }
data=inverse_permutation(data);
        return data;
    }

    public static String Dec_round(String data, String subkey) {

        String R = data.substring(0, 32);
        String L = MangularFunction(R, subkey);
        L = xor(L, data.substring(32, 64));
        return L + R;
    }
//
//    public static void main(String[] args) {
//        
//String s="0AZazI love Egypt";
//        System.out.println(s.charAt(0)=='0');
//s=s.replace(" ", "");
//s=s.replace("\n", "");
//        System.out.println(s);
////        String key = "00010011001101000101011101111001"
////                + "10011011101111001101111111110001";
////        String data = "0000000100100011010001010110011110001001101010111100110111101111";
////        System.out.println("data\n" + data);
////        String cipther = Encription(data, key);
////        System.out.println("Encrepton \n" + cipther);
////        System.out.println("Dencrepton \n" + Decription("1000010111101000000100110101010000001111000010101011010000000101", key));
//    }
}
